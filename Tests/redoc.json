{
  "openapi": "3.0.0",
  "info": {
    "title": "Swagger Petstore",
    "description": "This is a sample server Petstore server.\nYou can find out more about Swagger at\n[http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).\nFor this sample, you can use the api key `special-key` to test the authorization filters.\n\n# Introduction\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# OpenAPI Specification\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# Cross-Origin Resource Sharing\nThis API features Cross-Origin Resource Sharing (CORS) implemented in compliance with  [W3C spec](https://www.w3.org/TR/cors/).\nAnd that allows cross-domain communication from the browser.\nAll responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.\n\n# Authentication\n\nPetstore offers two forms of authentication:\n  - API Key\n  - OAuth2\nOAuth2 - an open protocol to allow secure authorization in a simple\nand standard method from web, mobile and desktop applications.\n\n<SecurityDefinitions />\n",
    "termsOfService": "http://swagger.io/terms/",
    "contact": {
      "name": "API Support",
      "url": "https://github.com/Redocly/redoc",
      "email": "apiteam@swagger.io"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "1.0.0",
    "x-logo": {
      "url": "https://redocly.github.io/redoc/petstore-logo.png",
      "altText": "Petstore logo"
    }
  },
  "servers": [
    {
      "url": "//petstore.swagger.io/v2",
      "description": "Default server"
    },
    {
      "url": "//petstore.swagger.io/sandbox",
      "description": "Sandbox server"
    }
  ],
  "paths": {
    "/pet": {
      "parameters": [
        {
          "name": "Accept-Language",
          "in": "header",
          "description": "The language you prefer for messages. Supported values are en-AU, en-CA, en-GB, en-US",
          "schema": {
            "type": "string",
            "default": "en-AU"
          },
          "example": "en-US"
        },
        {
          "name": "cookieParam",
          "in": "cookie",
          "required": true,
          "description": "Some cookie",
          "schema": {
            "type": "integer",
            "format": "int64"
          }
        }
      ],
      "post": {
        "tags": [
          "pet"
        ],
        "summary": "Add a new pet to the store",
        "description": "Add new pet to the store inventory.",
        "operationId": "addPet",
        "requestBody": {},
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ],
        "x-code-samples": [
          {
            "lang": "C#",
            "source": "PetStore.v1.Pet pet = new PetStore.v1.Pet();\npet.setApiKey(\"your api key\");\npet.petType = PetStore.v1.Pet.TYPE_DOG;\npet.name = \"Rex\";\n// set other fields\nPetStoreResponse response = pet.create();\nif (response.statusCode == HttpStatusCode.Created)\n{\n  // Successfully created\n}\nelse\n{\n  // Something wrong -- check response for errors\n  Console.WriteLine(response.getRawResponse());\n}\n"
          },
          {
            "lang": "PHP",
            "source": "$form = new \\PetStore\\Entities\\Pet();\n$form->setPetType(\"Dog\");\n$form->setName(\"Rex\");\n// set other fields\ntry {\n    $pet = $client->pets()->create($form);\n} catch (UnprocessableEntityException $e) {\n    var_dump($e->getErrors());\n}\n"
          }
        ]
      },
      "put": {
        "tags": [
          "pet"
        ],
        "summary": "Update an existing pet",
        "description": "",
        "operationId": "updatePet",
        "requestBody": {},
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Pet not found"
          },
          "405": {
            "description": "Validation exception"
          }
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ],
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$form = new \\PetStore\\Entities\\Pet();\n$form->setPetId(1);\n$form->setPetType(\"Dog\");\n$form->setName(\"Rex\");\n// set other fields\ntry {\n    $pet = $client->pets()->update($form);\n} catch (UnprocessableEntityException $e) {\n    var_dump($e->getErrors());\n}\n"
          }
        ]
      }
    },
    "/pet/{petId}": {
      "get": {
        "tags": [
          "pet"
        ],
        "summary": "Find pet by ID",
        "description": "Returns a single pet",
        "operationId": "getPetById",
        "parameters": [
          {
            "name": "petId",
            "in": "path",
            "required": true,
            "description": "ID of pet to return",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "deprecated": "true"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pet"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Pet"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Pet not found"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "post": {
        "tags": [
          "pet"
        ],
        "summary": "Updates a pet in the store with form data",
        "description": "",
        "operationId": "updatePetWithForm",
        "parameters": [
          {
            "name": "petId",
            "in": "path",
            "required": true,
            "description": "ID of pet that needs to be updated",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Updated name of the pet"
                  },
                  "status": {
                    "type": "string",
                    "description": "Updated status of the pet"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "pet"
        ],
        "summary": "Deletes a pet",
        "description": "",
        "operationId": "deletePet",
        "parameters": [
          {
            "name": "api_key",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "example": "Bearer <TOKEN>"
          },
          {
            "name": "petId",
            "in": "path",
            "required": true,
            "description": "Pet id to delete",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid pet value"
          }
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ]
      }
    },
    "/pet/{petId}/uploadImage": {
      "post": {
        "tags": [
          "pet"
        ],
        "summary": "uploads an image",
        "description": "",
        "operationId": "uploadFile",
        "parameters": [
          {
            "name": "petId",
            "in": "path",
            "required": true,
            "description": "ID of pet to update",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/octet-stream": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ]
      }
    },
    "/pet/findByStatus": {
      "get": {
        "tags": [
          "pet"
        ],
        "summary": "Finds Pets by status",
        "description": "Multiple status values can be provided with comma separated strings",
        "operationId": "findPetsByStatus",
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "style": "form",
            "required": true,
            "description": "Status values that need to be considered for filter",
            "schema": {
              "type": "array",
              "maxItems": 3,
              "minItems": 1,
              "items": {
                "type": "string",
                "default": "available",
                "enum": [
                  "available",
                  "pending",
                  "sold"
                ]
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Pet"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Pet"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ]
      }
    },
    "/pet/findByTags": {
      "get": {
        "tags": [
          "pet"
        ],
        "summary": "Finds Pets by tags",
        "description": "Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.",
        "operationId": "findPetsByTags",
        "parameters": [
          {
            "name": "tags",
            "in": "query",
            "style": "form",
            "required": true,
            "description": "Tags to filter by",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Pet"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Pet"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid tag value"
          }
        },
        "deprecated": true,
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ]
      }
    },
    "/store/inventory": {
      "get": {
        "tags": [
          "store"
        ],
        "summary": "Returns pet inventories by status",
        "description": "Returns a map of status codes to quantities",
        "operationId": "getInventory",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "integer",
                    "format": "int32"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/store/order": {
      "post": {
        "tags": [
          "store"
        ],
        "summary": "Place an order for a pet",
        "description": "",
        "operationId": "placeOrder",
        "requestBody": {
          "description": "order placed for purchasing the pet",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Order"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Order",
            "content": {
              "application/json": {
                "example": {
                  "status": "400",
                  "message": "Invalid Order"
                }
              }
            }
          }
        }
      }
    },
    "/store/order/{orderId}": {
      "get": {
        "tags": [
          "store"
        ],
        "summary": "Find purchase order by ID",
        "description": "For valid response try integer IDs with value <= 5 or > 10. Other values will generated exceptions",
        "operationId": "getOrderById",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "required": true,
            "description": "ID of pet that needs to be fetched",
            "schema": {
              "type": "integer",
              "format": "int64",
              "maximum": 5.0,
              "minimum": 1.0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Order not found"
          }
        }
      },
      "delete": {
        "tags": [
          "store"
        ],
        "summary": "Delete purchase order by ID",
        "description": "For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors",
        "operationId": "deleteOrder",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "required": true,
            "description": "ID of the order that needs to be deleted",
            "schema": {
              "type": "string",
              "minimum": 1.0
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Order not found"
          }
        }
      }
    },
    "/user": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Create user",
        "description": "This can only be done by the logged in user.",
        "operationId": "createUser",
        "requestBody": {
          "description": "Created user object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/user/{username}": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get user by user name",
        "description": "",
        "operationId": "getUserByName",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "required": true,
            "description": "The name that needs to be fetched. Use user1 for testing. ",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Updated user",
        "description": "This can only be done by the logged in user.",
        "operationId": "updateUser",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "required": true,
            "description": "name that need to be deleted",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Updated user object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Invalid user supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "delete": {
        "tags": [
          "user"
        ],
        "summary": "Delete user",
        "description": "This can only be done by the logged in user.",
        "operationId": "deleteUser",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "required": true,
            "description": "The name that needs to be deleted",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/user/createWithArray": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Creates list of users with given input array",
        "description": "",
        "operationId": "createUsersWithArrayInput",
        "requestBody": {},
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/user/createWithList": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Creates list of users with given input array",
        "description": "",
        "operationId": "createUsersWithListInput",
        "requestBody": {},
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/user/login": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Logs user into the system",
        "description": "",
        "operationId": "loginUser",
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "required": true,
            "description": "The user name for login",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "password",
            "in": "query",
            "required": true,
            "description": "The password for login in clear text",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {
              "X-Rate-Limit": {
                "description": "calls per hour allowed by the user",
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "X-Expires-After": {
                "description": "date in UTC when token expires",
                "schema": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "examples": {
                  "response": {
                    "value": "OK"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "string"
                },
                "examples": {
                  "response": {
                    "value": "<Message> OK </Message>"
                  }
                }
              },
              "text/plain": {
                "examples": {
                  "response": {
                    "value": "OK"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid username/password supplied"
          }
        }
      }
    },
    "/user/logout": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Logs out current logged in user session",
        "description": "",
        "operationId": "logoutUser",
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ApiResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "Cat": {
        "description": "A representation of a cat",
        "allOf": [
          {
            "$ref": "#/components/schemas/Pet"
          },
          {
            "type": "object",
            "required": [
              "huntingSkill"
            ],
            "properties": {
              "huntingSkill": {
                "type": "string",
                "description": "The measured skill for hunting",
                "default": "lazy",
                "example": "adventurous",
                "enum": [
                  "clueless",
                  "lazy",
                  "adventurous",
                  "aggressive"
                ]
              }
            }
          }
        ]
      },
      "Category": {
        "type": "object",
        "xml": {
          "name": "Category"
        },
        "properties": {
          "id": {
            "description": "Category ID",
            "allOf": [
              {
                "$ref": "#/components/schemas/Id"
              }
            ]
          },
          "name": {
            "type": "string",
            "description": "Category name",
            "minLength": 1
          },
          "sub": {
            "type": "object",
            "description": "Test Sub Category",
            "properties": {
              "prop1": {
                "type": "string",
                "description": "Dumb Property"
              }
            }
          }
        }
      },
      "Dog": {
        "description": "A representation of a dog",
        "allOf": [
          {
            "$ref": "#/components/schemas/Pet"
          },
          {
            "type": "object",
            "required": [
              "packSize"
            ],
            "properties": {
              "packSize": {
                "type": "integer",
                "description": "The size of the pack the dog is from",
                "format": "int32",
                "default": "1",
                "minimum": 1.0
              }
            }
          }
        ]
      },
      "HoneyBee": {
        "description": "A representation of a honey bee",
        "allOf": [
          {
            "$ref": "#/components/schemas/Pet"
          },
          {
            "type": "object",
            "required": [
              "honeyPerDay"
            ],
            "properties": {
              "honeyPerDay": {
                "type": "number",
                "description": "Average amount of honey produced per day in ounces",
                "multipleOf": 0.01,
                "example": "3.14"
              }
            }
          }
        ]
      },
      "Id": {
        "type": "integer",
        "format": "int64",
        "readOnly": "true"
      },
      "Order": {
        "type": "object",
        "xml": {
          "name": "Order"
        },
        "properties": {
          "id": {
            "description": "Order ID",
            "allOf": [
              {
                "$ref": "#/components/schemas/Id"
              }
            ]
          },
          "petId": {
            "description": "Pet ID",
            "allOf": [
              {
                "$ref": "#/components/schemas/Id"
              }
            ]
          },
          "quantity": {
            "type": "integer",
            "format": "int32",
            "default": "1",
            "minimum": 1.0
          },
          "shipDate": {
            "type": "string",
            "description": "Estimated ship date",
            "format": "date-time"
          },
          "status": {
            "type": "string",
            "description": "Order Status",
            "enum": [
              "placed",
              "approved",
              "delivered"
            ]
          },
          "complete": {
            "type": "boolean",
            "readOnly": true,
            "description": "Indicates whenever order was completed or not",
            "default": "false"
          },
          "requestId": {
            "type": "string",
            "writeOnly": true,
            "description": "Unique Request Id"
          }
        }
      },
      "Pet": {
        "type": "object",
        "discriminator": {
          "propertyName": "petType",
          "mapping": {
            "cat": "#/components/schemas/Cat",
            "dog": "#/components/schemas/Dog",
            "bee": "#/components/schemas/HoneyBee"
          }
        },
        "xml": {
          "name": "Pet"
        },
        "required": [
          "name",
          "photoUrls"
        ],
        "properties": {
          "id": {
            "description": "Pet ID",
            "allOf": [
              {
                "$ref": "#/components/schemas/Id"
              }
            ],
            "externalDocs": {
              "description": "Find more info here",
              "url": "https://example.com"
            }
          },
          "category": {
            "description": "Categories this pet belongs to",
            "allOf": [
              {
                "$ref": "#/components/schemas/Category"
              }
            ]
          },
          "name": {
            "type": "string",
            "description": "The name given to a pet",
            "example": "Guru"
          },
          "photoUrls": {
            "type": "array",
            "description": "The list of URL to a cute photos featuring pet",
            "maxItems": 20,
            "xml": {
              "name": "photoUrl",
              "wrapped": true
            },
            "items": {
              "type": "string",
              "format": "url"
            }
          },
          "friend": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Pet"
              }
            ]
          },
          "tags": {
            "type": "array",
            "description": "Tags attached to the pet",
            "minItems": 1,
            "xml": {
              "name": "tag",
              "wrapped": true
            },
            "items": {
              "$ref": "#/components/schemas/Tag"
            }
          },
          "status": {
            "type": "string",
            "description": "Pet status in the store",
            "enum": [
              "available",
              "pending",
              "sold"
            ]
          },
          "petType": {
            "type": "string",
            "description": "Type of a pet"
          }
        }
      },
      "Tag": {
        "type": "object",
        "xml": {
          "name": "Tag"
        },
        "properties": {
          "id": {
            "description": "Tag ID",
            "allOf": [
              {
                "$ref": "#/components/schemas/Id"
              }
            ]
          },
          "name": {
            "type": "string",
            "description": "Tag name",
            "minLength": 1
          }
        }
      },
      "User": {
        "type": "object",
        "xml": {
          "name": "User"
        },
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Id"
          },
          "pet": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/Pet"
              },
              {
                "$ref": "#/components/schemas/Tag"
              }
            ]
          },
          "username": {
            "type": "string",
            "description": "User supplied username",
            "minLength": 4,
            "example": "John78"
          },
          "firstName": {
            "type": "string",
            "description": "User first name",
            "minLength": 1,
            "example": "John"
          },
          "lastName": {
            "type": "string",
            "description": "User last name",
            "minLength": 1,
            "example": "Smith"
          },
          "email": {
            "type": "string",
            "description": "User email address",
            "format": "email",
            "example": "john.smith@example.com"
          },
          "password": {
            "type": "string",
            "description": "User password, MUST contain a mix of upper and lower case letters, as well as digits",
            "format": "password",
            "minLength": 8,
            "pattern": "/(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])/",
            "example": "drowssaP123"
          },
          "phone": {
            "type": "string",
            "description": "User phone number in international format",
            "pattern": "/^\\+(?:[0-9]-?){6,14}[0-9]$/",
            "example": "+1-202-555-0192"
          },
          "userStatus": {
            "type": "integer",
            "description": "User status",
            "format": "int32"
          }
        }
      }
    },
    "examples": {
      "Order": {
        "value": {
          "quantity": "1,",
          "shipDate": "2018-10-19T16:46:45Z,",
          "status": "placed,",
          "complete": "false"
        }
      }
    },
    "securitySchemes": {
      "petstore_auth": {
        "type": "oauth2",
        "description": "Get access to data while protecting your account credentials.\nOAuth2 is also a safer and more secure way to give you access.\n",
        "flows": {
          "implicit": {
            "authorizationUrl": "http://petstore.swagger.io/api/oauth/dialog",
            "scopes": {
              "write:pets": "modify pets in your account",
              "read:pets": "read your pets"
            }
          }
        }
      },
      "api_key": {
        "type": "apiKey",
        "description": "For this sample, you can use the api key `special-key` to test the authorization filters.\n",
        "name": "api_key",
        "in": "header"
      }
    }
  },
  "tags": [
    {
      "name": "pet",
      "description": "Everything about your Pets"
    },
    {
      "name": "store",
      "description": "Access to Petstore orders"
    },
    {
      "name": "user",
      "description": "Operations about user"
    },
    {
      "name": "pet_model",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/Pet\" />\n",
      "x-displayName": "The Pet Model"
    },
    {
      "name": "store_model",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/Order\" exampleRef=\"#/components/examples/Order\" showReadOnly={true} showWriteOnly={true} />\n",
      "x-displayName": "The Order Model"
    }
  ],
  "externalDocs": {
    "description": "Find out how to create Github repo for your OpenAPI spec.",
    "url": "https://github.com/Rebilly/generator-openapi-repo"
  },
  "x-tagGroups": [
    {
      "name": "General",
      "tags": [
        "pet",
        "store"
      ]
    },
    {
      "name": "User Management",
      "tags": [
        "user"
      ]
    },
    {
      "name": "Models",
      "tags": [
        "pet_model",
        "store_model"
      ]
    }
  ]
}